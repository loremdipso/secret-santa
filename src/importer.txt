import { getPlayerId, playerIsEmpty } from "./helpers";
import { IImportFile, IPair, IPlayer } from "./interfaces";

export type IResult<T, E> = { value: T } | { error: E };

export interface IOnImport {
	(newPlayers: IPlayer[], newExclusions: IPair[]): any;
}

export function parseFile(contentsStr: string, onSuccess: IOnImport): IResult<void, string> {
	let contents: IImportFile;
	try {
		contents = JSON.parse(contentsStr);
	} catch (e) {
		return { error: "Invalid import file" };
	}

	if (!contents || !contents.people || !contents.bad_pairs) {
		return { error: "Invalid import file" };
	} else {
		try {
			let newPlayers = contents.people
				.map(({ name, email, address }) => {
					let newPlayer = {
						name,
						email,
						address,
						id: getPlayerId(),
						exclusions: [],
					};
					if (playerIsEmpty(newPlayer)) {
						console.log("Skipping a poorly configured player");
					} else {
						return newPlayer;
					}
				})
				.filter((player) => !!player);

			let newExclusions = contents.bad_pairs
				.map((pair) => {
					let a = findPlayer(newPlayers, pair[0]);
					let b = findPlayerByName(newPlayers, pair[1]);
					if (a && b) {
						return {
							a: a.id,
							b: b.id,
							id: getPairId(),
						};
					}
					return null;
				})
				.filter((pair) => !!pair);

			onSuccess(newPlayers, newExclusions);
		} catch (e) {
			console.log(e);
			return showErrorToast("Error processing import file");
		}
	}
}
